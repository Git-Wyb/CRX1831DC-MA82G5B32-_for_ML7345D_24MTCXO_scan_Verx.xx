C51 COMPILER V9.60.0.0   SPI                                                               02/25/2022 17:15:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE user\src\spi.c OPTIMIZE(0,SPEED) BROWSE INCDIR(.\include;.\user\inc) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\spi.lst) OBJECT(.\Objects\spi.obj)

line level    source

   1          #include "spi.h"
   2          
   3          
   4          void Init_Spi(void)
   5          {
   6   1          // 使能SPI
   7   1          SPI_Enable();
   8   1              // 设置MASTER
   9   1              SPI_SelectMASTERByMSTRbit();
  10   1              // 设置SPI时钟 SYSCLK/16
  11   1              SPI_SetClock(SPI_CLK_SYSCLK_8);
  12   1              // 设置SPICLK初始电平 CPOL=0 低电平
  13   1              SPI_SetCPOL_0();        
  14   1              // 设置数据传送位序 MSB 高位在前
  15   1              SPI_SetDataMSB();
  16   1              // 设置采样和改变数据模式 CPHA=0 前沿采样,后沿改变数据
  17   1              SPI_SetCPHA_0();
  18   1              // 设置IO nSS/P14,MOSI/P15,MISO/P16,SPICLK/P17
  19   1              SPI_SetUseP14P15P16P17();
  20   1          
  21   1          SPI1_CS_H;
  22   1      }
  23          
  24          
  25          /***********************************************************************************
  26          函数名称:   u8 SPI1_SendRecv_Data(u8 ToSend)
  27          功能描述:   SPI主机模式收发数据
  28          输入参数:   u8 SPI_DATA: 待发送的数据
  29          返回参数:   u8 :收到的数据  
  30          *************************************************************************************/
  31          u8 SPI1_SendRecv_Data(u8 SPI_DATA)
  32          {
  33   1          while(SPSTAT & THRF);
  34   1              SPI_SendData(SPI_DATA);                                                 // SPI 发送数据
  35   1              while(SPI_ChkCompleteFlag()==0);                                // 等待SPI传送完成
  36   1              SPI_ClearCompleteFlag();                                                // SPI 清完成标志
  37   1          while(SPSTAT & SPIBSY);
  38   1              return SPI_GetData();                                                   // 返回接收到的数据
  39   1      }
  40          
  41          
  42          void ML7345_Write_Reg(u8 addr,u8 dat)
  43          {
  44   1          DelayXus(1);
  45   1          SPI1_CS_L;
  46   1          DelayXus(1);
  47   1      
  48   1          addr = (addr << 1) | 0x01;
  49   1          SPI1_SendRecv_Data(addr);
  50   1          SPI1_SendRecv_Data(dat);
  51   1      
  52   1          DelayXus(1);
  53   1          SPI1_CS_H;
  54   1          DelayXus(1);
C51 COMPILER V9.60.0.0   SPI                                                               02/25/2022 17:15:43 PAGE 2   

  55   1      }
  56          
  57          u8 ML7345_Read_Reg(u8 addr)
  58          {
  59   1          xdata u8 read = 0;
  60   1          DelayXus(1);
  61   1          SPI1_CS_L;
  62   1          DelayXus(1);
  63   1      
  64   1          addr = addr << 1;
  65   1          SPI1_SendRecv_Data(addr);       /* 写地址 */
  66   1          read = SPI1_SendRecv_Data(0xFF);/* 读数据 */
  67   1      
  68   1          DelayXus(1);
  69   1          SPI1_CS_H;
  70   1          DelayXus(1);
  71   1      
  72   1          return read;
  73   1      }
  74          
  75          void ML7345_Write_Fifo(u8 addr,u8 *pbuf,u8 len)
  76          {
  77   1          xdata u8 i = 0;
  78   1          DelayXus(1);
  79   1          SPI1_CS_L;
  80   1          DelayXus(1);
  81   1      
  82   1          addr = (addr << 1) | 0x01;
  83   1          SPI1_SendRecv_Data(addr);
  84   1          SPI1_SendRecv_Data(pbuf[0]);
  85   1          for(i=1; i<len; i++)
  86   1          {
  87   2              DelayXus(2);
  88   2              SPI1_SendRecv_Data(pbuf[i]);
  89   2          }
  90   1      
  91   1          DelayXus(1);
  92   1          SPI1_CS_H;
  93   1          DelayXus(1);
  94   1      }
  95          
  96          void ML7345_Read_Fifo(u8 addr,u8 *pbuf,u8 len)
  97          {
  98   1          xdata u8 i = 0;
  99   1          DelayXus(1);
 100   1          SPI1_CS_L;
 101   1          DelayXus(1);
 102   1      
 103   1          addr = addr << 1;
 104   1          SPI1_SendRecv_Data(addr);
 105   1      
 106   1          for(i=0; i<len; i++)
 107   1          {
 108   2              pbuf[i] = SPI1_SendRecv_Data(0xFF);
 109   2          }
 110   1      
 111   1          DelayXus(1);
 112   1          SPI1_CS_H;
 113   1          DelayXus(1);
 114   1      }
 115          //////////////////////////////////////////////////////////////////////////////////////////////
 116          
C51 COMPILER V9.60.0.0   SPI                                                               02/25/2022 17:15:43 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    390    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
